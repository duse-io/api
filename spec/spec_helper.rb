# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider
# making a separate helper file that requires the additional dependencies and
# performs the additional setup, and require it from the spec files that
# actually need it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

unless ENV['CI']
  require 'simplecov'
  SimpleCov.start
end

if ENV['CI']
  require 'coveralls'
  Coveralls.wear!
end

ENV['SECRET_KEY'] ||= 'le_super_secret_key'
ENV['RACK_ENV'] ||= 'test'

require_relative '../config/environment'
require 'api'
require 'database_cleaner'
require 'rack/test'
require 'json'
require 'openssl'

Mail.defaults do
  delivery_method :test
end

DatabaseCleaner.strategy = :truncation
DatabaseCleaner.clean # start with a clean database

def generate_public_key(size = 1024)
  generate_key(size).public_key.to_s
end

def generate_key(size = 1024)
  OpenSSL::PKey::RSA.generate(size)
end

def share(user_id, raw_share, private_key, public_key)
  encrypted_share, signature = Encryption.encrypt(
    private_key, public_key, raw_share
  )
  { user_id: user_id, content: encrypted_share, signature: signature }
end

def create_default_user(options = {})
  username = options[:username] || 'test'
  Duse::Models::User.create(
    username: username,
    email: options[:email] || "#{username}@example.org",
    password: options[:password] || 'Passw0rd!',
    password_confirmation: options[:password_confirmation] || 'Passw0rd!',
    public_key: options[:public_key] || generate_public_key
  )
end

RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    # be_bigger_than(2).and_smaller_than(4).description
    #   # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #   # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end
end

